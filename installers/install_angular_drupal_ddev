#!/bin/bash
# -*- ENCODING: UTF-8 -*-

#
#-----------------------------------------------------------
# 
# Installing Complete  Environment 
# [David RodrÃ­guez Vicente, @davidjguru] [davidjguru@gmail.com]
# Title: Drupal Installer
# Description: Download and install a Drupal codebase project inside a new environment based in docker - ddev. 
#
# davidjguru@gmail.com
#-----------------------------------------------------------
#

# Preparations 
echo -e "   \e[1;4;31mWelcome to the Docker Installer\e[0m"

## Search for docker packages previously installed 
echo -e "   \e[1;4;31mNow, we gotta search for installed docker packages: \e[0m"
apt list --installed |grep docker

## Uninstall the existing packages and stop Apache Server in Host
echo -e "   \e[1;4;31mAnd now uninstall all the docker packages: \e[0m"
sudo apt-get remove docker docker.io docker-ce docker-ce-cli docker-compose -y
sudo /etc/init.d/apache2 stop

## Confirm the uninstall
echo -e "   \e[1;4;31mConfirm the uninstall looking for the packages: \e[0m"
apt list --installed |grep docker 

# Installing resources 

## Update the list of packages
echo -e "   \e[1;4;31mUpdate the package list: \e[0m"
sudo apt-get update

## Install prerequisite packages
echo -e "   \e[1;4;31mInstall previous packages: \e[0m"
sudo apt-get install -y build-essential apt-transport-https ca-certificates curl software-properties-common file

## Install docker
echo -e "   \e[1;4;31mInstalling docker resources: \e[0m"
sudo apt-get install -y docker-ce docker-ce-cli docker-compose

## Test if docker is running or not
echo -e "   \e[1;4;31mIs Docker running or not?: \e[0m"
systemctl is-active docker
echo -e "   \e[1;4;31mEnd of the Docker Initial installation \e[0m"

# Configure DDEV 

## Installing Linuxbrew
echo -e "   \e[1;4;31mNow, we're go to get Linuxbrew: \e[0m"
yes | sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
yes | test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
yes | test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
yes | test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile 

## Install ddev or update if exists  
echo -e "   \e[1;4;31mInstalling ddev in your sistem: \e[0m"
brew tap drud/ddev && brew install ddev
brew upgrade ddev

## Get the keyname of the project
echo -e "   \e[1;4;31mWrite your project name: \e[0m"
read -p $'   \e[1;36mKeyname of the project:\e[0m ' varkeyname
varkeyname=${varkeyname:-d8deploy}

# Build the Drupal project 

## Build a new Drupal-based project using ddev
echo -e "    \e[1;4;31mLet's have to build the Drupal codebase: \e[0m"
mkdir $varkeyname && cd $varkeyname && ddev config --project-type php --php-version 7.3 && ddev composer create drupal-composer/drupal-project:8.x-dev --stability dev --no-interaction && ddev config --project-type drupal8 && ddev exec drush site-install standard --site-name=$varkeyname --account-name=admin --account-pass=admin --account-mail=mail@example.com && ddev start

## Install and enable some Basic Drupal Modules ready for work: devel, masquerade, admin_toolbar and webprofiler
echo -e "    \e[1;4;31mNow with a new Drupal, we want some basic modules: \e[0m"
ddev composer require drupal/devel drupal/masquerade drupal/admin_toolbar
ddev exec drush en devel masquerade admin_toolbar webprofiler
ddev exec drush cr
echo -e "    \e[1;4;31mBrowser will open Drupal in a new tab, but we're still here: \e[0m"
sensible-browser http://$varkeyname.ddev.local

# Install other resources 

## Install packages in the new system
echo -e "    \e[1;4;31mIn this block, we'll install some packages like sqlite, git-flow and others: \e[0m"
ddev exec sudo apt-get update
ddev exec sudo apt-get install -y sqlite3 git-flow

## Installing node, npm and Angular
echo -e "    \e[1;4;31mInstalling node, npm and Angular in our new system: \e[0m"
ddev exec curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash
ddev exec sudo apt-get install -y nodejs
ddev exec node -v
ddev exec npm -v
ddev exec sudo npm install @angular/cli -g
ddev exec ng version
echo -e "    \e[1;4;31mThe whole  installation has been completed, see you inside the new container...Happy Hacking!!! \e[0m"
ddev ssh
